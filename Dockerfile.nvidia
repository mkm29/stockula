# syntax=docker/dockerfile:1
# GPU-enabled Dockerfile for Stockula trading platform

ARG PYTHON_VERSION=3.12
ARG CUDA_VERSION=13.0.0
ARG UBUNTU_VERSION=24.04

# ============================================
# Stage 1: Builder
# ============================================
FROM nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu${UBUNTU_VERSION} AS builder

# Set environment for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install Python and essential build dependencies
# hadolint ignore=DL3008
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        python3-pip \
        python3-venv \
        curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy requirements first for better caching
COPY requirements-gpu.txt ./

# Create virtual environment and install core dependencies
# Skip heavy GPU packages during build for faster iteration
# hadolint ignore=DL3013,SC1091
RUN python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
        numpy==2.3.2 \
        pandas==2.3.1 \
        scikit-learn==1.7.1 \
        yfinance==0.2.65 \
        sqlalchemy==2.0.42 \
        sqlmodel==0.0.24 \
        pydantic==2.11.7 \
        pydantic-settings==2.10.1 \
        rich==14.1.0 \
        typer==0.16.0 \
        autogluon-timeseries==1.2.0 \
        backtesting==0.6.5 \
        finta==1.3

# Copy source code (changes more frequently than requirements)
COPY src/stockula /build/stockula
COPY scripts/ /build/scripts/

# Make stockula importable
RUN echo "/build" > /opt/venv/lib/python3.12/site-packages/stockula.pth

# ============================================
# Stage 2: Runtime
# ============================================
FROM nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu${UBUNTU_VERSION} AS runtime

# Labels for image metadata
LABEL org.opencontainers.image.title="Stockula GPU" \
      org.opencontainers.image.description="GPU-accelerated trading platform" \
      org.opencontainers.image.vendor="Stockula Project" \
      org.opencontainers.image.source="https://github.com/mkm29/stockula"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    VIRTUAL_ENV="/opt/venv" \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Install minimal runtime dependencies
# hadolint ignore=DL3008
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 \
        ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy virtual environment and application from builder
COPY --from=builder --chown=ubuntu:ubuntu /opt/venv /opt/venv
COPY --from=builder --chown=ubuntu:ubuntu /build/stockula /app/stockula
COPY --from=builder --chown=ubuntu:ubuntu /build/scripts /app/scripts

# Update Python path
RUN rm -f /opt/venv/lib/python3.12/site-packages/stockula.pth && \
    echo "/app" > /opt/venv/lib/python3.12/site-packages/stockula.pth

# Create directories with proper permissions
RUN mkdir -p /app/data /app/results /app/logs && \
    chown -R ubuntu:ubuntu /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "import stockula; print('Stockula is healthy')" || exit 1

# Switch to non-root user
USER ubuntu

# Default command
ENTRYPOINT ["python", "-m"]
CMD ["stockula", "--help"]

# ============================================
# Stage 3: CLI - Interactive development
# ============================================
FROM runtime AS gpu-cli

USER root

# Install additional tools for development
# hadolint ignore=DL3008
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        less \
        vim-tiny \
        curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create GPU diagnostic script
RUN printf '#!/bin/bash\n\
echo "=== GPU Information ==="\n\
nvidia-smi 2>/dev/null || echo "nvidia-smi not available"\n\
echo ""\n\
echo "=== Python GPU Check ==="\n\
python3 -c "import sys; print(f\"Python: {sys.version}\"); print(\"GPU packages can be installed at runtime\")" 2>/dev/null\n' \
    > /usr/local/bin/gpu-check && \
    chmod +x /usr/local/bin/gpu-check

# Switch back to non-root user
USER ubuntu
WORKDIR /app

# Interactive shell
CMD ["/bin/bash"]