---
name: Docker Build and Push

on:
  release:
    types: [published]
  push:
    branches:
      - 'feature/**'
      - 'feat/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag (leave empty to use latest git tag)'
        required: false
        type: string
      push:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile
            target: cli
            suffix: ""
            platforms: linux/amd64,linux/arm64
          - dockerfile: Dockerfile.nvidia
            target: gpu-cli
            suffix: "-gpu"
            platforms: linux/amd64
    steps:
      - name: Check if build should run
        id: should_build
        run: |
          # Check if this matrix job should run based on the condition
          if [[ "${{ matrix.dockerfile }}" == "Dockerfile.nvidia" ]]; then
            # GPU builds only for releases and manual workflow dispatch
            if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping GPU build for feature branch" >> $GITHUB_STEP_SUMMARY
            fi
          else
            # Always build standard CLI
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.should_build.outputs.should_run == 'true'
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version
        id: version
        if: steps.should_build.outputs.should_run == 'true'
        run: "# Use input version if provided, otherwise determine based on event\nif [[ -n \"${{ inputs.version }}\" ]]; then\n  VERSION=\"${{ inputs.version }}\"\nelif [[ \"${{ github.event_name }}\" == \"release\" ]]; then\n  VERSION=\"${{ github.event.release.tag_name }}\"\nelif [[ \"${{ github.event_name }}\" == \"push\" ]] && [[ \"${{ github.ref }}\" == refs/heads/feature/* || \"${{ github.ref }}\" == refs/heads/feat/* ]]; then\n  # For feature branches, create a special Docker tag (no Git tag)\n  # Format: feat-<branch-name>-<short-sha>\n  BRANCH_NAME=\"${{ github.ref_name }}\"\n  # Replace slashes with dashes and remove feature/ or feat/ prefix\n  BRANCH_NAME=\"${BRANCH_NAME#feature/}\"\n  BRANCH_NAME=\"${BRANCH_NAME#feat/}\"\n  BRANCH_NAME=\"${BRANCH_NAME//\\//-}\"\n  # Get short SHA\n  SHORT_SHA=\"${{ github.sha }}\"\n  SHORT_SHA=\"${SHORT_SHA:0:7}\"\n  # Get current version from pyproject.toml or latest tag\n  BASE_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = \"\\(.*\\)\"/\\1/' || echo \"0.0.0\")\n  # Create version tag for feature branch\n  VERSION=\"${BASE_VERSION}-feat.${BRANCH_NAME}.${SHORT_SHA}\"\nelse\n  # Get the latest tag or use dev\n  VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo \"dev\")\nfi\n  #magic___^_^___line\n# Docker tags format:\n# - RC versions: 0.12.1-rc.1\n# - Stable versions: v0.12.1  \n# - Feature branches: 0.12.1-feat.<branch-name>.<short-sha>\n  #magic___^_^___line\necho \"version=$VERSION\" >> $GITHUB_OUTPUT\necho \"Using version: $VERSION\"\n  #magic___^_^___line\n"
      - name: Extract metadata
        id: meta
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            suffix=${{ matrix.suffix }},onlatest=true
          tags: |
            # Use the exact Git tag as Docker tag
            type=raw,value=${{ steps.version.outputs.version }}
            # For RC releases, also tag as 'rc' for latest RC
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, 'rc') && matrix.suffix == '' }}
            # For feature branches, also tag as 'feat' for latest feature build
            type=raw,value=feat,enable=${{ contains(steps.version.outputs.version, 'feat') && matrix.suffix == '' }}
            # For development builds
            type=raw,value=dev,enable=${{ steps.version.outputs.version == 'dev' }}
            # SHA-based tag for traceability
            type=sha,prefix={{branch}}-,format=short

      - name: Build and push Docker image
        if: steps.should_build.outputs.should_run == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'release' || (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/feat/'))) || inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILD_DATE=${{ github.event.release.created_at || github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_URL=${{ github.server_url }}/${{ github.repository }}

      - name: Generate image summary
        if: success() && steps.should_build.outputs.should_run == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          SUFFIX="${{ matrix.suffix }}"
          TARGET="${{ matrix.target }}"

          echo "## 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: \`$TARGET\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.IMAGE_NAME }}$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [[ "$VERSION" == *"rc"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **Note**: This is a release candidate image." >> $GITHUB_STEP_SUMMARY
          elif [[ "$VERSION" == *"feat"* ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚧 **Note**: This is a feature branch development image." >> $GITHUB_STEP_SUMMARY
            echo "You can also pull the latest feature build with: \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}$SUFFIX:feat\`" >> $GITHUB_STEP_SUMMARY
          fi

  publish-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    permissions:
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest for RC
        if: contains(github.event.release.tag_name, 'rc')
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"

          # Create manifest for standard image
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Also tag as 'rc' for latest RC
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION-arm64

          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc

      - name: Summary
        run: |
          echo "## ✅ Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == refs/heads/feature/* || "${{ github.ref }}" == refs/heads/feat/* ]]; then
            echo "Feature branch build completed. Only the standard CLI image was built." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Image" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}\` - Standard CLI image" >> $GITHUB_STEP_SUMMARY
          else
            echo "All images have been successfully built and pushed to GitHub Container Registry." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Available Images" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}\` - Standard CLI image" >> $GITHUB_STEP_SUMMARY
            echo "- \`ghcr.io/${{ github.repository }}-gpu\` - GPU-accelerated CLI image" >> $GITHUB_STEP_SUMMARY
          fi
