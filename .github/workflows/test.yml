---
name: Test
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]
env:
  UV_CACHE_DIR: /tmp/.uv-cache
jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install dependencies
        run: uv sync --all-extras --dev
      - name: Run linting
        run: |
          uv run ruff check src tests
          uv run ruff format --check src tests
      - name: Minimize uv cache
        run: uv cache prune --ci
  unit-tests:
    runs-on: ubuntu-latest
    needs: [linting]  # Only run tests if linting passes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install dependencies
        run: uv sync --all-extras --dev
      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          uv run pytest tests/unit -v --cov=src/stockula --cov-report=xml --cov-report=term-missing
      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: unit-test-coverage
          fail_ci_if_error: false
      - name: Upload unit test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
      - name: Cleanup test artifacts
        if: always()
        run: |
          rm -f coverage.xml
      - name: Minimize uv cache
        run: uv cache prune --ci
  database:
    runs-on: ubuntu-latest
    needs: [linting]  # Only needs linting to pass
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      - name: Install dependencies
        run: uv sync --all-extras --dev
      - name: Test database migrations
        run: |
          # Test that database can be created from scratch
          uv run python -c "
          from sqlmodel import create_engine, SQLModel
          from stockula.database.models import Stock, PriceHistory, AutoTSModel, AutoTSPreset
          engine = create_engine('sqlite:///test_migration.db')
          SQLModel.metadata.create_all(engine)
          print('‚úì Database schema created successfully')
          "
      - name: Test AutoTS model seeding
        run: |
          # Test that models can be seeded from AutoTS
          uv run python -c "
          from sqlmodel import Session, create_engine, SQLModel
          from stockula.data.autots_repository import AutoTSRepository
          from stockula.database.models import AutoTSModel

          # Create database
          engine = create_engine('sqlite:///test_seeding.db')
          SQLModel.metadata.create_all(engine)

          # Seed models
          with Session(engine) as session:
              repo = AutoTSRepository(session)
              models_count, presets_count = repo.seed_from_autots()
              print(f'‚úì Seeded {models_count} models and {presets_count} presets')

              # Verify some models exist
              assert repo.get_model('ARIMA') is not None
              assert repo.get_model('ETS') is not None
              assert repo.get_preset('fast') is not None
              print('‚úì Model validation working correctly')
          "
      - name: Test repository patterns
        run: "# Test the new repository pattern implementation\nuv run python -c \"\nfrom sqlmodel import Session, create_engine, SQLModel\nfrom stockula.data.autots_repository import AutoTSRepository\nfrom stockula.database.models import AutoTSModel, AutoTSPreset\n\nengine = create_engine('sqlite:///test_repository.db')\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    repo = AutoTSRepository(session)\n    \n    # Test model validation\n    assert AutoTSModel.is_valid_model('ARIMA') == True\n    assert AutoTSModel.is_valid_model('InvalidModel') == False\n    print('‚úì Model validation working')\n    \n    # Test preset validation\n    assert AutoTSPreset.is_valid_preset('fast') == True\n    assert AutoTSPreset.is_valid_preset('invalid_preset') == False\n    print('‚úì Preset validation working')\n    \n    # Test model list validation\n    is_valid, invalid = AutoTSModel.validate_model_list(['ARIMA', 'ETS', 'FakeModel'])\n    assert is_valid == False\n    assert 'FakeModel' in invalid\n    print('‚úì Model list validation working')\n\"\n"
      - name: Cleanup test databases
        if: always()
        run: |
          rm -f test_migration.db
          rm -f test_seeding.db
          rm -f test_repository.db
      - name: Minimize uv cache
        run: uv cache prune --ci
  all-tests-pass:
    runs-on: ubuntu-latest
    needs: [linting, unit-tests, database]
    if: always()
    steps:
      - name: Check test results
        run: "if [[ \"${{ needs.linting.result }}\" != \"success\" || \n      \"${{ needs.unit-tests.result }}\" != \"success\" || \n      \"${{ needs.database.result }}\" != \"success\" ]]; then\n  echo \"‚ùå One or more test jobs failed\"\n  echo \"  - Linting: ${{ needs.linting.result }}\"\n  echo \"  - Unit Tests: ${{ needs.unit-tests.result }}\"\n  echo \"  - Database Tests: ${{ needs.database.result }}\"\n  exit 1\nelse\n  echo \"‚úÖ All test jobs passed successfully\"\nfi\n"
